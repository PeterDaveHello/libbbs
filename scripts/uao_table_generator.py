#!/usr/bin/env python3
import codecs
import os

PROJECT_BASE = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')
PROJECT_DATA = os.path.join(PROJECT_BASE, 'data')
PROJECT_SRC  = os.path.join(PROJECT_BASE, 'src')

SCRIPT = os.path.relpath(os.path.realpath(__file__), PROJECT_BASE)

CP950  = os.path.join(PROJECT_DATA, 'cp950', 'cp950-b2u.txt')
UAO241 = os.path.join(PROJECT_DATA, 'uao', 'uao241-b2u.txt')
UAO250 = os.path.join(PROJECT_DATA, 'uao', 'uao250-b2u.txt')

OUTPUT_HEADER = os.path.join(PROJECT_SRC, 'uao_table.h')

def to_utf8_string(unicode_):
    return codecs.encode(chr(unicode_), 'UTF-8')

def to_big5_string(big5):
    if big5 // 0x100:
        return bytes([big5 // 0x100, big5 % 0x100])
    return bytes([big5])

def read_data():
    b2u_common = {}
    b2u_uao241 = {}
    b2u_uao250 = {}

    with open(CP950) as f:
        for l in f:
            if l.startswith('#'):
                continue
            (big5, unicode_) = map(lambda x: int(x, 0), l.split(' '))

            big5 = to_big5_string(big5)
            utf8 = to_utf8_string(unicode_)

            b2u_common[big5] = utf8

    with open(UAO241) as f:
        for l in f:
            if l.startswith('#'):
                continue
            (big5, unicode_) = map(lambda x: int(x, 0), l.split(' '))

            big5 = to_big5_string(big5)
            utf8 = to_utf8_string(unicode_)

            b2u_uao241[big5] = utf8

    with open(UAO250) as f:
        for l in f:
            if l.startswith('#'):
                continue
            (big5, unicode_) = map(lambda x: int(x, 0), l.split(' '))

            big5 = to_big5_string(big5)
            utf8 = to_utf8_string(unicode_)

            if big5 in b2u_uao241 and b2u_uao241[big5] == utf8:
                b2u_common[big5] = utf8
                del b2u_uao241[big5]
            else:
                b2u_uao250[big5] = utf8

    return list(b2u_common.items()), list(b2u_uao241.items()), list(b2u_uao250.items())

def get_byte_string(b):
    res = ""
    for x in b:
        res += "\\x{:02x}".format(x)

    return res

def main():
    b2u_common, b2u_uao241, b2u_uao250 = read_data()

    with open(OUTPUT_HEADER, 'w') as f:
        print('// Generated by {}'.format(SCRIPT), file=f)
        content = '''
#pragma once

enum {
    UTF8_SIZE = 4 + 1,
    BIG5_SIZE = 2 + 1,
};

struct Big5_UTF8_Table {
    char big5[BIG5_SIZE];
    char utf8[UTF8_SIZE];
};
        '''
        print(content, file=f)

        sort_func = lambda x: x[0]
        b2u_common.sort(key=sort_func)
        b2u_uao241.sort(key=sort_func)
        b2u_uao250.sort(key=sort_func)

        print('struct Big5_UTF8_Table BIG5_TO_UTF8_COMMON[] = {', file=f)
        for x in b2u_common:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

        print('struct Big5_UTF8_Table BIG5_TO_UTF8_UAO241[] = {', file=f)
        for x in b2u_uao241:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

        print('struct Big5_UTF8_Table BIG5_TO_UTF8_UAO250[] = {', file=f)
        for x in b2u_uao250:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

        sort_func = lambda x: x[1]
        b2u_common.sort(key=sort_func)
        b2u_uao241.sort(key=sort_func)
        b2u_uao250.sort(key=sort_func)

        print('struct Big5_UTF8_Table UTF8_TO_BIG5_UAO250[] = {', file=f)
        for x in b2u_common:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

        print('struct Big5_UTF8_Table UTF8_TO_BIG5_COMMON[] = {', file=f)
        for x in b2u_uao241:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

        print('struct Big5_UTF8_Table UTF8_TO_BIG5_UAO241[] = {', file=f)
        for x in b2u_uao250:
            print('    {{ "{}", "{}", }},'.format(get_byte_string(x[0]), get_byte_string(x[1])), file=f)
        print('};', file=f)

if __name__ == '__main__':
    main()
